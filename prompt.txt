Prompt for Generating a Single-File AI Fitness Planner Web Application
Objective: Create a single HTML file web application named "AI Fitness Planner." This application will allow users to input their fitness-related information, receive a personalized workout plan generated by a Gemini large language model, and view this plan. The application should support English and Persian languages.

I. Core Structure & Technologies:

Single File: All HTML, CSS, and JavaScript must be embedded within a single index.html file.

Styling: Use Tailwind CSS (loaded via CDN) for all styling. Ensure a modern, responsive, and user-friendly interface.

JavaScript: Use vanilla JavaScript (ES6+) for all client-side logic.

LLM Integration: Integrate with the Gemini API, specifically using the gemini-2.5-flash-preview-05-20 model via its generateContent endpoint.

II. User Interface (UI) & User Experience (UX):

Layout:

Header: Display the application title ("AI Fitness Planner") and a subtitle.

Settings Bar: Include a language switcher (dropdown) in the top-right corner for English and Persian.

API Key Input: Provide an optional input field for the Gemini API key, with a note that it might be environment-handled for specific models.

Main Content Area: A multi-step form for user input, a message display area, and a section to display the generated plan.

Footer: Include a copyright notice and a disclaimer.

Input Form (Multi-Step):

Step 1: Basic Information:

Age (number, 10-99)

Gender (select: Male, Female, Other/Prefer not to say)

Height (number, cm, 100-250)

Weight (number, kg, 30-200)

Activity Level (select: Sedentary, Lightly Active, Moderately Active, Very Active, Extra Active)

Step 2: Goals & General Preferences:

Primary Goal (select: Fat Loss, Muscle Gain, Endurance Improvement, Flexibility & Mobility, General Health & Fitness)

Timeframe for Goal (text input, e.g., "8 weeks")

Exercise Experience Level (select: Beginner, Intermediate, Advanced)

Workout Days Per Week (number, 1-7)

Max Duration Per Session (number, minutes, 20-120)

Equipment Availability (select: None, Basic, Full Gym)

Step 3: Advanced Customization:

Preferred Exercise Types (checkbox group: Cardio, Strength Training, Bodyweight, Yoga/Pilates, HIIT)

Focus Areas (checkbox group, optional: Upper Body, Lower Body, Core, Flexibility/Mobility, Balance)

Physical Limitations or Injuries (textarea)

Workout Structuring Style (select: Full Body, Split Routines, Flexible Mix)

Include Warm-up & Cool-down (checkbox, checked by default)

Request Basic Nutrition Guidelines (checkbox)

Submission: A prominent "Generate My Personalized Plan" button.

Message Area: Display loading messages, success messages, and error messages clearly.

Plan Display Area:

Initially hidden.

Show a title "Your Personalized Workout Plan."

Display an overview section (Total Weeks, Workouts Per Week).

If requested, display Warm-up and Cool-down routines.

List each day of the plan (e.g., "Day 1 - Monday: Upper Body") with its summary and a list of exercises.

Each exercise should show: Name, Sets, Reps/Duration, Rest, and optional Notes.

If requested, display Nutrition Guidelines (Calories, Macros, General Advice).

Style this section for easy readability (e.g., using cards for each day/section).

III. Language Support (Internationalization - i18n):

Languages: Support English (default) and Persian.

UI Text: All static UI text (labels, button text, titles, placeholders, messages) should be translatable. Implement a basic JavaScript translation mechanism using a translations object.

Language Switcher: The dropdown in the settings bar should trigger a language change.

RTL Support: When Persian is selected, apply dir="rtl" to the <body> and adjust styles as necessary for correct right-to-left layout (e.g., icon margins, text alignment for specific elements).

Plan Content Language: Instruct the Gemini API (via the prompt) to generate the plan content (exercise names, notes) in the user's selected language if possible.

IV. JavaScript Logic (App object):

Initialization (App.init): Set up event listeners for form submission and language change. Apply the default language.

Language Handling (App.setLanguage, App.handleLanguageChange, App.translateSelectOptions):

Store the current language.

Update document.documentElement.lang and document.body.dir.

Iterate through elements with data-translate-key attributes to update their text content or placeholders based on the selected language.

Translate options within <select> elements.

Form Data Collection (App.getFormData):

Retrieve all values from the form.

Collect values from checkbox groups correctly.

Perform basic validation (e.g., check for empty required fields and highlight them).

Include currentLanguage in the collected form data.

API Prompt Engineering (App.buildPrompt):

Construct a detailed prompt for the Gemini API, incorporating all user profile data from getFormData.

Include the languageInstruction to request plan generation in the user's preferred language.

Clearly specify the required JSON output structure (see Section V).

JSON Schema Definition (App.getPlanSchema):

Define the responseSchema to be sent in the generationConfig to the Gemini API. This schema should match the detailed plan structure outlined in Section V.

API Call (App.handleFormSubmit):

Make an asynchronous fetch POST request to the GEMINI_API_BASE_URL (https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent).

Include the API key (from input or environment).

Send the contents (user prompt) and generationConfig (with responseMimeType: "application/json" and the responseSchema).

Handle API response:

Check response.ok.

Parse the JSON response.

Extract the plan data from result.candidates[0].content.parts[0].text.

Call App.renderPlan on success.

Handle API errors and display them in the message area.

Manage button disabling/enabling during API calls.

Plan Rendering (App.renderPlan):

Clear any previous plan.

Dynamically create HTML elements to display the plan overview, warm-up/cool-down (if any), each day's workout (label, summary, exercises with details), and nutrition guidelines (if any).

Use translated text for static parts of the plan display (e.g., "Total Weeks:", "Exercises:").

Messaging (App.displayMessage, App.clearMessages):

Functions to show and clear messages (loading, success, error) in the designated message area, with appropriate styling and icons. Support translated messages.

V. Gemini API - Expected JSON Output Structure (for plan key):

{
  "plan": {
    "totalWeeks": Number, // e.g., 6
    "daysPerWeek": Number, // e.g., 3 (matches user input)
    "days": [ // Array of DayPlan Objects, should represent a 7-day cycle
      {
        "dayLabel": "String", // e.g., "Day 1 - Monday: Upper Body Strength" or "روز ۱ - دوشنبه: قدرتی بالاتنه"
        "summary": "String", // e.g., "Focus on chest, shoulders, triceps" or "تمرکز بر سینه، سرشانه، پشت بازو"
        "exercises": [ // Empty array if it's a Rest Day
          {
            "name": "String", // e.g., "Barbell Bench Press" or "پرس سینه با هالتر"
            "sets": "String", // e.g., "3-4"
            "reps": "String", // e.g., "8-12 reps" or "۳۰ ثانیه"
            "restSeconds": Number, // e.g., 90
            "notes": "String" // (Optional) e.g., "Keep elbows tucked." or "آرنج‌ها را نزدیک بدن نگه دارید."
          }
          // ... more exercises
        ]
      }
      // ... more days (total 7, including rest days)
    ],
    "warmupRoutine": "String", // (Optional) Text describing warm-up
    "cooldownRoutine": "String", // (Optional) Text describing cool-down
    "nutritionGuidelines": { // (Optional)
      "dailyCaloriesEstimate": "String", // e.g., "2200-2500 kcal"
      "macroBreakdown": {
        "proteinPct": Number, // e.g., 30
        "carbsPct": Number, // e.g., 40
        "fatsPct": Number // e.g., 30
      },
      "generalAdvice": ["String"] // Array of advice strings
    }
  }
}

VI. Error Handling and Validation:

Form Validation: Client-side validation for required fields. Display clear error messages if validation fails, ideally near the respective fields and also in the main message area. Highlight invalid fields.

API Errors: Gracefully handle errors from the API (network issues, status codes like 4xx/5xx, malformed responses). Display user-friendly error messages.

VII. Styling Notes:

Use icons (e.g., emojis or simple SVGs) for step titles in the form.

Ensure good contrast and readability.

Make interactive elements (buttons, inputs) clearly distinguishable and provide hover/focus states.

The overall design should be clean, professional, and encouraging for users.

This prompt should guide the development of the AI Fitness Planner application with the specified features.
